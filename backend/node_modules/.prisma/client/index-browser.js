
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.9.0
 * Query Engine version: 81e4af48011447c3cc503a190e86995b66d2a28e
 */
Prisma.prismaVersion = {
  client: "6.9.0",
  engine: "81e4af48011447c3cc503a190e86995b66d2a28e"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.TenantScalarFieldEnum = {
  id: 'id',
  name: 'name',
  companyName: 'companyName',
  domain: 'domain',
  plan: 'plan',
  status: 'status',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  userType: 'userType',
  companyName: 'companyName',
  vipCardNumber: 'vipCardNumber',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.RestaurantScalarFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  nameKorean: 'nameKorean',
  category: 'category',
  address: 'address',
  lat: 'lat',
  lng: 'lng',
  stars: 'stars',
  menu: 'menu',
  tags: 'tags',
  corkage: 'corkage',
  parking: 'parking',
  numberOfSeats: 'numberOfSeats',
  registrationDate: 'registrationDate',
  commissionFee: 'commissionFee',
  ownerId: 'ownerId',
  michelinGuide: 'michelinGuide',
  description: 'description',
  phone: 'phone',
  services: 'services',
  social: 'social',
  openingHours: 'openingHours',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.MenuItemScalarFieldEnum = {
  id: 'id',
  name: 'name',
  nameKorean: 'nameKorean',
  price: 'price',
  description: 'description',
  restaurantId: 'restaurantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReviewScalarFieldEnum = {
  id: 'id',
  rating: 'rating',
  content: 'content',
  userId: 'userId',
  restaurantId: 'restaurantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.ReservationScalarFieldEnum = {
  id: 'id',
  date: 'date',
  time: 'time',
  people: 'people',
  specialRequest: 'specialRequest',
  status: 'status',
  name: 'name',
  userId: 'userId',
  restaurantId: 'restaurantId',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.FavoriteScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  restaurantId: 'restaurantId',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.PaymentScalarFieldEnum = {
  id: 'id',
  reservationId: 'reservationId',
  userId: 'userId',
  paymentMethod: 'paymentMethod',
  amount: 'amount',
  status: 'status',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.VipRequestScalarFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  vipCardNumber: 'vipCardNumber',
  status: 'status',
  requestDate: 'requestDate',
  createdAt: 'createdAt',
  deletedAt: 'deletedAt'
};

exports.Prisma.AuditLogScalarFieldEnum = {
  id: 'id',
  model: 'model',
  operation: 'operation',
  recordId: 'recordId',
  userId: 'userId',
  dataBefore: 'dataBefore',
  dataAfter: 'dataAfter',
  timestamp: 'timestamp'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.NullableJsonNullValueInput = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};

exports.Prisma.TenantOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  companyName: 'companyName',
  domain: 'domain'
};

exports.Prisma.UserOrderByRelevanceFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  email: 'email',
  password: 'password',
  name: 'name',
  phone: 'phone',
  companyName: 'companyName',
  vipCardNumber: 'vipCardNumber'
};

exports.Prisma.JsonNullValueFilter = {
  DbNull: Prisma.DbNull,
  JsonNull: Prisma.JsonNull,
  AnyNull: Prisma.AnyNull
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.RestaurantOrderByRelevanceFieldEnum = {
  id: 'id',
  tenantId: 'tenantId',
  name: 'name',
  nameKorean: 'nameKorean',
  category: 'category',
  address: 'address',
  menu: 'menu',
  ownerId: 'ownerId',
  michelinGuide: 'michelinGuide',
  description: 'description',
  phone: 'phone'
};

exports.Prisma.MenuItemOrderByRelevanceFieldEnum = {
  id: 'id',
  name: 'name',
  nameKorean: 'nameKorean',
  price: 'price',
  description: 'description',
  restaurantId: 'restaurantId'
};

exports.Prisma.ReviewOrderByRelevanceFieldEnum = {
  id: 'id',
  content: 'content',
  userId: 'userId',
  restaurantId: 'restaurantId'
};

exports.Prisma.ReservationOrderByRelevanceFieldEnum = {
  id: 'id',
  time: 'time',
  specialRequest: 'specialRequest',
  name: 'name',
  userId: 'userId',
  restaurantId: 'restaurantId'
};

exports.Prisma.FavoriteOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  restaurantId: 'restaurantId'
};

exports.Prisma.PaymentOrderByRelevanceFieldEnum = {
  id: 'id',
  reservationId: 'reservationId',
  userId: 'userId',
  paymentMethod: 'paymentMethod'
};

exports.Prisma.VipRequestOrderByRelevanceFieldEnum = {
  id: 'id',
  userId: 'userId',
  companyName: 'companyName',
  vipCardNumber: 'vipCardNumber'
};

exports.Prisma.AuditLogOrderByRelevanceFieldEnum = {
  id: 'id',
  model: 'model',
  operation: 'operation',
  recordId: 'recordId',
  userId: 'userId'
};
exports.SubscriptionPlan = exports.$Enums.SubscriptionPlan = {
  FREE: 'FREE',
  BASIC: 'BASIC',
  PREMIUM: 'PREMIUM',
  ENTERPRISE: 'ENTERPRISE'
};

exports.TenantStatus = exports.$Enums.TenantStatus = {
  활성: '활성',
  중지: '중지',
  탈퇴: '탈퇴'
};

exports.UserType = exports.$Enums.UserType = {
  USER: 'USER',
  ADMIN: 'ADMIN',
  BUSINESS: 'BUSINESS',
  VIP: 'VIP'
};

exports.ReservationStatus = exports.$Enums.ReservationStatus = {
  대기: '대기',
  확정: '확정',
  취소: '취소'
};

exports.PaymentStatus = exports.$Enums.PaymentStatus = {
  대기: '대기',
  완료: '완료',
  취소: '취소'
};

exports.VipRequestStatus = exports.$Enums.VipRequestStatus = {
  대기: '대기',
  승인: '승인',
  거절: '거절'
};

exports.Prisma.ModelName = {
  Tenant: 'Tenant',
  User: 'User',
  Restaurant: 'Restaurant',
  MenuItem: 'MenuItem',
  Review: 'Review',
  Reservation: 'Reservation',
  Favorite: 'Favorite',
  Payment: 'Payment',
  VipRequest: 'VipRequest',
  AuditLog: 'AuditLog'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
